from powerpoint (slide 20)

How to talk to a database SQL: Structured Query Language

Pronounced "sequel" for Microsoft products e.g. SQLServer
Pronounced "s-q-l" for most other DBs
Very common query language, used by many major databases
Used to query database, and send the database commands to carry out
Some variations between DBs, but SQL basics are the same or very similar between databases
So, learning SQL enables you to communicate with most databases

SQL

Databases often speak SQL
You need to construct SQL statements to ask the database to do tasks
A SQL statement can
-create a table
-add data to a table
-fetch data from a table
-delete data from a table
-modify data
-delete a table
-And many other operations…
We need to wrap the SQL statements into Java method calls so your program can send them to the database

***SQL statements – creating a table (slide 24)***

String createTableSQL = "CREATE TABLE cats (name TEXT, age INTEGER)";
statement.executeUpdate(createTableSQL);

CREATE TABLE cats (name TEXT, age INTEGER)

This is a SQL statement instructing the database
to create a table called cats with two columns, one called name that stores text.
The second column is called age and stores integer data.

Remember the order that the columns are in. (will need to insert data in the same order)

Other SQL statements can add data, fetch data, modify data, delete data, delete tables.

***SQL statements – adding data to a table***

String addDataSQL = "INSERT INTO cats VALUES ('Maru', 10)";
statement.executeUpdate(addDataSQL);

INSERT INTO cats VALUES ('Maru', 10)

This is a SQL statement instructing the database to add a row of data to the cats table.
The data goes in the parentheses, in the same order as the columns were defined in
the table.

Strings are enclosed in single quotes.

Table names, column names, and SQL keywords (create table, insert into, values...) are not case sensitive.

String/text data is case sensitive.

**SQL queries: reading data **

SELECT statements used to read data
SELECT * FROM cats gets all the columns and rows (select all from cats)
    -We'll use row and column filters soon
Use statement.executeQuery(sql) method
    //this ^^ is a query that will return some data
Data is returned in a ResultSet

***ResultSet***

How much data will be returned from the query?
Between 0 and millions (maybe billions?) of rows
Loading all the data into memory could be bad or may be impossible
So, must access the data using a ResultSet, one row at a time

Loop over the ResultSet using the next() method in a while loop
The next() method returns true if there is another row to read, false otherwise

  String getAllDataSQL = "SELECT * FROM cats";
  ResultSet allCats = statement.executeQuery(getAllDataSQL);

  while(allCats.next()) {
  //returns true if there are more rows to read,
  //false if all the rows have been read (so ends when the data is out)
  }
        String catName = allCats.getString("name");
        int catAge = allCats.getInt("age");
        System.out.println(catName + " is " + catAge + " years old");
        System.out.printf("%s is %d years old\n", catName, catAge);

Read data from one DB row at a time
  getString(colName) method for TEXT columns,
  getInt(colName) for INTEGER columns,
  getDouble(colName) for REAL columns
    **REAL is for floating point numbers, in Java you'll use double

vid_4_work 19:45 timestamp work with database tool in Intellij:
**can type SQL into the console/shell of the database you are working with

//don't forget to close the connection:
connection.close();

**there are (my) good notes in console [hello.sqlite] in:
Hello First Database Second try
-> 'Scratches and Consoles'
-> Database Consoles
-> hello.sqlite
-> console [hello.sqlite]

vid_5_notes:

1. make a new database:
    -click the plus sign above the database tab in Java
    -select Data Source ->
    -select SQLite
    -name the file at the top something .sqlite
    -name the File location the same as just above
    **example: movies.sqlite
    - press save
   ***This make a new empty database (with framework) for you in Java

2. Add these things to the database:
 name (String)
 stars (int)
 watched (boolean)

 notes: SQlite doesn't have boolean, so have to store as 0 or 1 (false or true)
    SQlite will do the conversion for you

 Another note: no built in date: so, use timestamp, and an integer number
 getTime(): will

Date now = new Date();

//the type is 'long' integer data type vvv
long timestamp = now.getTime();

System.out.println(timestamp); //a number like 1604092693335

Date fromTimeStamp = new Date(timestamp);
System.out.println(fromTimestamp); //the current date and time

Date july2017 = new Date (1500000000000L); //There's an L at the end of the number, it's a long not an int
System.out.println(july2017); //Thu Jul 13 21:40:00 CDT 2017

****NOtes taken in console [movies.sqlite]: through first batch of videos to 6)
create table movies (name text, stars integer, watched boolean);

insert into movies values ('When Harry met Sally', 4, false);
insert into movies values ('Independence Day', 3, false);
insert into movies values ('Terminator', 1, true);
insert into movies values ('Forrest Gump', 5, false);
insert into movies values ('Titanic', 5, false);
insert into movies values ('Blue Lagoon', 2, true);

select * from movies;

-- all were run, all data was added

--only interested in name of movie:
select name from movies;
-- shows only names

--get more than one column:
select name, watched from movies;

-- select specific rows that I haven't watched yet:
select * from movies where watched = false;
--watched = 0

-- select specific rows that I have watched yet:
select * from movies where watched = true;
--watched = 1

--choose movies that are well rated (> 3):
select * from movies where stars > 3;
--returns 3 movies with ratings above 3

-- search for movie that match a specific name:
select * from movies where name = 'Forrest Gump';
--lists the movie
-- these are case sensitive

-- to search without case sensitive:
select * from movies where upper(name) = upper('forrest gump');
-- result: Forrest Gump

select * from movies where upper(name) = upper('TITANIC');
-- result: Titanic

-- search for partial text: '%a%' represents all text that have an 'a' in them:
select * from movies where name like '%a%';

-- find all movies that begin with a letter T:
select * from movies where name like 'T%';

--find movies that end with a certain character:
select * from movies where name like '%or';

--can combine queries using 'and' and 'or':
select * from movies where name like '%or' and stars >4;
-- this returned nothing, but only because the query was too restrictive. the code is correct.

-- if just want the name:
select name from movies where name like '%or' and stars < 4;
-- returns 'Terminator'

-- if you want to select more than one column:
select name, stars from movies where watched = true;
--returns Terminator and Blue Lagoon