Error handling:

Use try with resources:

3. In Database.java in Movies_vid_1b:

Go from : //the SQL code will go here:

            package Movies_vid_1b;

            import java.sql.Connection;
            import java.sql.DriverManager;
            import java.sql.Statement;

            public class Database {
                //2. Make a field to store the database path:
                private String databasePath;

                //1. use a constructor:
                //will create a movie table
                //need to know where the movie table is stored
                    //-pass that in the argument area () after Database vv:
                Database(String databasePath){
                    //create table, or make sure it is created:
                    //connect and create a table:
                    //connection is the connection to the database (on the computer or on the internet)
                    Connection connection = DriverManager.getConnection(databasePath);

                    //statement can execute SQL statements (execute, create table, etc.)
                    Statement statement = connection.createStatement();
                }
            }
added 4 parts: in: Database.java
1. constructor:
2. Make a field to store the database path:
3. add try catch with resources:
4. ask the statement to do our SQL for us:

To this: //the SQL code will go here:

         package Movies_vid_1b;

         import java.sql.Connection;
         import java.sql.DriverManager;
         import java.sql.SQLException;
         import java.sql.Statement;

         public class Database {
             //2. Make a field to store the database path:
             private String databasePath;

             //1. use a constructor:
             //will create a movie table
             //need to know where the movie table is stored
                 //-pass that in the argument area () after Database vv:
             Database(String databasePath){
                 //3. add try catch with resources:

                 //create table, or make sure it is created:
                 //connect and create a table:
                 //connection is the connection to the database (on the computer or on the internet)
                try ( Connection connection = DriverManager.getConnection(databasePath);

                 //statement can execute SQL statements (execute, create table, etc.)
                 Statement statement = connection.createStatement()) {

                    //4. ask the statement to do our SQL for us:
                    statement.executeUpdate("CREATE TABLE IF NOT EXISTS " +
                            "movies(name text, stars integer, watch boolean)");


                } catch (SQLException e) {
                    System.out.println("Error creating movie DB table because " + e);
                }
             }
         }

vid_7 timestamp: 9:23 in: Database.java
adding data: by writing a method that adds data to the database:

after:        } catch (SQLException e) {
                  System.out.println("Error creating movie DB table because " + e);
              }
           }
           5. add data to the method here:

       }

looks like:    //5. write a method: void, called addNewMovie with Movie objects that will store data
               //and move them around (Movie movie)
               public void addNewMovie(Movie movie) {
                   //6. try connecting to the database:
                   try (Connection connection = DriverManager.getConnection(databasePath);
                   Statement statement = connection.createStatement()) {
                       //todo (mine) be sure to come back and finish this by adding movie:
                       statement.executeUpdate();
                   } catch (SQLException e) {
                       System.out.println("Error adding movie" + movie + " because " + e);
                   }

               }
           }
vid_7_adding stuff to Movie.java:
Start with:
//will be used to create Movie objects
//movie has a name and stars and weather it's been watched or not

package Movies_vid_1b;

public class Movie {
}

7.after:
package Movies_vid_1b;

public class Movie {
    String name;
    int stars;
    boolean watched;

    //create a constructor:
    Movie (String name, int stars, boolean watched) {
        this.name = name;
        this.stars = stars;
        this.watched = watched;

    }
}

8. Go to movieList.java that has main method:
start with: package Movies_vid_1b;

            public class MovieList {
                //add the main method here:
                public static void main(String[] args) {

                }
            }
End with:package Movies_vid_1b;

         public class MovieList {

             //make database path:
             //this ("jdbc:sqlite:movie_watchlist.sqlite") is a different file than the others you've been working with:
             private static final String DB_PATH = "jdbc:sqlite:movie_watchlist.sqlite";

             //create another variable
             //this will be an object of type Database (as in Database.java) with name 'database', and
             //      will be one of the objects
             private static Database database;

             //add the main method here:
             public static void main(String[] args) {
                 //create a new database object called "database"
                 //then passing it to the constructor in Database.java using "new Database(DB_PATH)"
                 //then Database.java will be able to use this to set up the database
                 database = new Database(DB_PATH);

             }
         }
9. go to Database.java and save the database path value:
after this: Database(String databasePath){

start with:    Database(String databasePath){

                   this.databasePath = databasePath;

                  try ( Connection connection = DriverManager.getConnection(databasePath);
                  //continued...

end with:         //9. (in vid_7_or_1b_notes:
                  //this will save the databasePath:
                 added this:  this.databasePath = databasePath;

10. in MovieList.java
//add method that can add movies:
after:         database = new Database(DB_PATH);
           }
add this method:
        }
        //notes in: vid_7_or_1b_notes
        //10. add a method to add new movies:
        public static void addNewMovie() {
            //add a do/while loop that ends when the user stops saying yes to "Add a movie to the watchlist"
            do {
                String movieName = stringInput("Enter the movie name");
                boolean movieWatched = yesNoInput("Have you seen this movie yet?");

                int movieStars = 0;
                if(movieWatched) {
                    movieStars = positiveIntInput("What is your rating, in stars out of 5?");
                //todo (clara) add validation to make sure the number is between 0-5

11. add a new movie object (that will grab info from Movie.java) in MovieList.java:
after:     movieStars = positiveIntInput("What is your rating, in stars out of 5?");
                       //todo (clara) add validation to make sure the number is between 0-5

add this:
           Movie movie = new Movie(movieName, movieStars, movieWatched);

//12. give this movie object to the database (field at the top of MovieList.java
            //this information to save by adding .addNewMovie to the database object (from the top of this file)
            //with movie object in the parentheses:
            // **This (movie) vv will be the argument to the addNewMovie method found in Database.java
            database.addNewMovie(movie);

13. finish the addNewMovie method in in Database.java:

before:       public void addNewMovie(Movie movie) {
          //6. try connecting to the database:
          try (Connection connection = DriverManager.getConnection(databasePath);
          Statement statement = connection.createStatement()) {
              //todo (mine) be sure to come back and finish this by adding movie:
  //            statement.executeUpdate();
          } catch (SQLException e) {
              System.out.println("Error adding movie" + movie + " because " + e);
          }
after: